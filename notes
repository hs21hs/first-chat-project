potential issues/ questions:

-the schema pre 'remove' doesnt work when u do findAndDelete(). just with remove()
-learn what are the memory/speed implications. querying the db then mutating the response. of refining ur query so u get back a resp closer to what you want
-when you login/signup without a user it crashes, how can we catch this error etc?
-when testing the same endpoint for different ponints{
    should you have one test which returns multiple errors or should you have multiple tests as it is easier to read?
    -if it is the latter, having multiple tests for the same endpoint.{
        -should you write the test defensively or optimistically as described in "tests/users.test.js" test('A users newMessage attribute should read as true, if they have sent an unread message to current user')
        defensively: you assume the test is failaing and pass it if you find a reason to.
        optimistically: you assume the test is passing and fail it if you find a reason to.
    }
}
-in auth.js understand why we need to acces tokens thru a string const user = await User.findOne({ _id: decoded._id, 'tokens.token': token })
-consider if u want to auth nd test websockets

general notes:
-userSchema.static is for model/ userSchema.methods is for the instance

to do:
-start building it into tinder for dogs using tdd
    login sign up shld stay as is
    home shld have 
        1. my profile
            profile thumnail
            when you click on home thumbnail it shld open your profile card but with a back button.
            filter your search(location)(shld be stored in db)
        2. swipe section
            shows one profile card at a time by your set filters
            every swipe shld go thru websockets and send to everyone like a message
        3. matches/messages section
        just like, and chat shld be a seperate window or ctx whcih u can scroll up,

-add ability to filter matches by location
-add weather app to check wt weather will be like on dates

user to have: crud *must dependent destroy
username(of dog) not uniq
age
breed
email address
password
img: owner w dog

likes: c
Liker
Liked

matches: crd, every time a like happens u check if there is a corrsponding like
user
user

messages: cr
as is



right now:

-test that getSwipeUsers filters out ppl uve already liked or disliked or matched

-dislike button
    -creates a dilike in the backend
    -frontend will delete swipe user
    
-like button
    -creates a like in the backend
    -checks if that like can make a match
        if not nothing happens
        if yes create a match and socket.emit all and for logged in ppl add it to their myMatches state
    -frontend will delete that swpieUser

